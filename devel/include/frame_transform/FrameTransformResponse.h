// Generated by gencpp from file frame_transform/FrameTransformResponse.msg
// DO NOT EDIT!


#ifndef FRAME_TRANSFORM_MESSAGE_FRAMETRANSFORMRESPONSE_H
#define FRAME_TRANSFORM_MESSAGE_FRAMETRANSFORMRESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace frame_transform
{
template <class ContainerAllocator>
struct FrameTransformResponse_
{
  typedef FrameTransformResponse_<ContainerAllocator> Type;

  FrameTransformResponse_()
    : x_base_link_frame(0.0)
    , y_base_link_frame(0.0)
    , z_base_link_frame(0.0)  {
    }
  FrameTransformResponse_(const ContainerAllocator& _alloc)
    : x_base_link_frame(0.0)
    , y_base_link_frame(0.0)
    , z_base_link_frame(0.0)  {
  (void)_alloc;
    }



   typedef double _x_base_link_frame_type;
  _x_base_link_frame_type x_base_link_frame;

   typedef double _y_base_link_frame_type;
  _y_base_link_frame_type y_base_link_frame;

   typedef double _z_base_link_frame_type;
  _z_base_link_frame_type z_base_link_frame;





  typedef boost::shared_ptr< ::frame_transform::FrameTransformResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::frame_transform::FrameTransformResponse_<ContainerAllocator> const> ConstPtr;

}; // struct FrameTransformResponse_

typedef ::frame_transform::FrameTransformResponse_<std::allocator<void> > FrameTransformResponse;

typedef boost::shared_ptr< ::frame_transform::FrameTransformResponse > FrameTransformResponsePtr;
typedef boost::shared_ptr< ::frame_transform::FrameTransformResponse const> FrameTransformResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::frame_transform::FrameTransformResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::frame_transform::FrameTransformResponse_<ContainerAllocator1> & lhs, const ::frame_transform::FrameTransformResponse_<ContainerAllocator2> & rhs)
{
  return lhs.x_base_link_frame == rhs.x_base_link_frame &&
    lhs.y_base_link_frame == rhs.y_base_link_frame &&
    lhs.z_base_link_frame == rhs.z_base_link_frame;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::frame_transform::FrameTransformResponse_<ContainerAllocator1> & lhs, const ::frame_transform::FrameTransformResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace frame_transform

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::frame_transform::FrameTransformResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::frame_transform::FrameTransformResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::frame_transform::FrameTransformResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "136b4b47ffa027913397488262ef835b";
  }

  static const char* value(const ::frame_transform::FrameTransformResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x136b4b47ffa02791ULL;
  static const uint64_t static_value2 = 0x3397488262ef835bULL;
};

template<class ContainerAllocator>
struct DataType< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "frame_transform/FrameTransformResponse";
  }

  static const char* value(const ::frame_transform::FrameTransformResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x_base_link_frame\n"
"float64 y_base_link_frame\n"
"float64 z_base_link_frame\n"
;
  }

  static const char* value(const ::frame_transform::FrameTransformResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x_base_link_frame);
      stream.next(m.y_base_link_frame);
      stream.next(m.z_base_link_frame);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrameTransformResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::frame_transform::FrameTransformResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::frame_transform::FrameTransformResponse_<ContainerAllocator>& v)
  {
    s << indent << "x_base_link_frame: ";
    Printer<double>::stream(s, indent + "  ", v.x_base_link_frame);
    s << indent << "y_base_link_frame: ";
    Printer<double>::stream(s, indent + "  ", v.y_base_link_frame);
    s << indent << "z_base_link_frame: ";
    Printer<double>::stream(s, indent + "  ", v.z_base_link_frame);
  }
};

} // namespace message_operations
} // namespace ros

#endif // FRAME_TRANSFORM_MESSAGE_FRAMETRANSFORMRESPONSE_H
